name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      run_integration_tests:
        description: 'Run integration tests'
        required: false
        default: false
        type: boolean

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          
      - name: Install dependencies
        run: npm install
        
      - name: Run unit tests
        run: npm run test:unit
        working-directory: packages/clickhouse
        
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.event.inputs.run_integration_tests == 'true' }}
    services:
      clickhouse:
        image: clickhouse/clickhouse-server:latest
        ports:
          - 8123:8123
          - 9000:9000
        options: >-
          --ulimit nofile=262144:262144
          --health-cmd "wget --no-verbose --tries=1 --spider http://localhost:8123/ping || exit 1"
          --health-interval 3s
          --health-timeout 5s
          --health-retries 10
          --health-start-period 10s
          
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          
      - name: Install dependencies
        run: npm install
        
      - name: Run integration tests
        run: npm run test:integration
        working-directory: packages/clickhouse
        env:
          CLICKHOUSE_TEST_HOST: http://localhost:8123
          CLICKHOUSE_TEST_USER: default
          CLICKHOUSE_TEST_PASSWORD: ''
          CLICKHOUSE_TEST_DB: test_db
          
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: ${{ always() && needs.test.result == 'success' && (needs.integration-test.result == 'success' || needs.integration-test.result == 'skipped') }}
    permissions:
      contents: write
      issues: write
      pull-requests: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Configure Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies and generate lockfile
        run: npm install

      - name: Build packages
        run: |
          # Build in proper dependency order
          npm run build
        
      - name: Get latest version
        id: get_version
        run: |
          echo "LATEST_CLICKHOUSE_VERSION=$(npm view @hypequery/clickhouse version)" >> $GITHUB_OUTPUT
          echo "LATEST_CLI_VERSION=$(npm view @hypequery/cli version)" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Install semantic-release globally
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/commit-analyzer @semantic-release/git @semantic-release/github @semantic-release/npm @semantic-release/release-notes-generator

      - name: Release Clickhouse Package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          LATEST_VERSION: ${{ steps.get_version.outputs.LATEST_CLICKHOUSE_VERSION || '1.0.0' }}
        run: |
          cd packages/clickhouse
          echo "Publishing clickhouse package..."
          echo "Last published version: $LATEST_VERSION"
          
          # Run semantic-release with standard configuration
          semantic-release --extends ./.releaserc.cjs --no-ci
          
      - name: Release CLI Package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          LATEST_VERSION: ${{ steps.get_version.outputs.LATEST_CLI_VERSION || '0.1.0' }}
        run: |
          cd packages/cli
          echo "Publishing CLI package..."
          echo "Last published version: $LATEST_VERSION"
          semantic-release --extends ./.releaserc.cjs --no-ci