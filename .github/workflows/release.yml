name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (beta or stable)'
        required: true
        default: 'beta'
        type: choice
        options:
          - beta
          - stable

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies and generate lockfile
        run: npm install

      - name: Run tests
        run: npm test

      - name: Build
        run: npm run build
        
      - name: Get latest version
        id: get_version
        run: |
          echo "LATEST_VERSION=$(npm view @hypequery/core version)" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          # When triggered by push, always use beta. For manual workflow, use the selected option
          RELEASE_TYPE: ${{ github.event_name == 'push' && 'beta' || github.event.inputs.release_type }}
          LATEST_VERSION: ${{ steps.get_version.outputs.LATEST_VERSION || '1.0.0' }}
        run: |
          cd packages/core
          if [ "$RELEASE_TYPE" = "beta" ]; then
            echo "Publishing beta release..."
            echo "Last published version: $LATEST_VERSION"
            # Force a beta release with an explicit version to avoid conflicts
            npx semantic-release --extends ./.releaserc.cjs --no-ci --prerelease beta --no-verify-conditions
          else
            echo "Publishing stable release..."
            npx semantic-release --extends ./.releaserc.cjs --no-ci --branches main
          fi 