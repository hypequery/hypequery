// Generated by @hypequery/clickhouse
// This file defines TypeScript types based on your ClickHouse database schema

/**
 * Schema interface for use with createQueryBuilder<IntrospectedSchema>()
 * The string literals represent ClickHouse data types for each column
 */
export interface IntrospectedSchema {
  driver_info: {
    trip_id: 'Int64';
    driver_id: 'Int32';
    driver_name: 'String';
    driver_rating: 'Decimal(3, 2)';
    driver_experience_years: 'Int32';
    vehicle_type: 'String';
    vehicle_year: 'Int32';
    driver_status: 'String';
    acceptance_rate: 'Decimal(5, 2)';
    avg_response_time: 'Int32';
    total_completed_trips: 'Int32';
  };
  trips: {
    trip_id: 'UInt32';
    pickup_datetime: 'DateTime';
    dropoff_datetime: 'DateTime';
    pickup_longitude: 'Nullable(Float64)';
    pickup_latitude: 'Nullable(Float64)';
    dropoff_longitude: 'Nullable(Float64)';
    dropoff_latitude: 'Nullable(Float64)';
    passenger_count: 'UInt8';
    trip_distance: 'Float32';
    fare_amount: 'Float32';
    extra: 'Float32';
    tip_amount: 'Float32';
    tolls_amount: 'Float32';
    total_amount: 'Float32';
    payment_type: 'Enum8(\'CSH\' = 1, \'CRE\' = 2, \'NOC\' = 3, \'DIS\' = 4, \'UNK\' = 5)';
    pickup_ntaname: 'LowCardinality(String)';
    dropoff_ntaname: 'LowCardinality(String)';
  };
}

// Type-safe record types for each table
export interface Driver_infoRecord {
  trip_id: string;
  driver_id: number;
  driver_name: string;
  driver_rating: string;
  driver_experience_years: number;
  vehicle_type: string;
  vehicle_year: number;
  driver_status: string;
  acceptance_rate: string;
  avg_response_time: number;
  total_completed_trips: number;
}

export interface TripsRecord {
  trip_id: number;
  pickup_datetime: string;
  dropoff_datetime: string;
  pickup_longitude: number | null;
  pickup_latitude: number | null;
  dropoff_longitude: number | null;
  dropoff_latitude: number | null;
  passenger_count: number;
  trip_distance: number;
  fare_amount: number;
  extra: number;
  tip_amount: number;
  tolls_amount: number;
  total_amount: number;
  payment_type: string;
  pickup_ntaname: string;
  dropoff_ntaname: string;
}


/**
 * Usage example:
 * 
 * import { createQueryBuilder } from '@hypequery/clickhouse';
 * import { IntrospectedSchema } from './path-to-this-file';
 * 
 * // Create a type-safe query builder
 * const db = createQueryBuilder<IntrospectedSchema>();
 * 
 * // Now you have full type safety and autocomplete
 * const results = await db
 *   .from('driver_info')
 *   .select(['column1', 'column2'])
 *   .where('column1', 'eq', 'value')
 *   .execute();
 */
