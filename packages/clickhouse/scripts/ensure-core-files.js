#!/usr/bin/env node

/**
 * Script to ensure core files exist before building.
 * This script:
 * 1. Creates necessary directories if they don't exist
 * 2. Creates core files if they don't exist
 * 3. Verifies all required files are present
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.resolve(__dirname, '..');

const srcDir = path.join(rootDir, 'src');
const distDir = path.join(rootDir, 'dist');

console.log('Ensuring core files exist...');

// Create necessary directories
const directories = [
  path.join(distDir, 'core'),
  path.join(distDir, 'core', 'features'),
  path.join(distDir, 'core', 'formatters'),
  path.join(distDir, 'core', 'utils'),
  path.join(distDir, 'core', 'validators'),
  path.join(distDir, 'core', 'tests'),
  path.join(distDir, 'core', 'tests', 'integration'),
  path.join(distDir, 'types'),
  path.join(distDir, 'formatters'),
  path.join(distDir, 'cli')
];

for (const dir of directories) {
  if (!fs.existsSync(dir)) {
    console.log(`Creating directory: ${path.relative(rootDir, dir)}`);
    fs.mkdirSync(dir, { recursive: true });
  }
}

// Verify source directories exist
const requiredSourceDirs = [
  path.join(srcDir, 'core'),
  path.join(srcDir, 'types'),
  path.join(srcDir, 'formatters'),
  path.join(srcDir, 'cli')
];

console.log('Checking source directories...');
for (const dir of requiredSourceDirs) {
  if (!fs.existsSync(dir)) {
    console.error(`Error: Required source directory ${path.relative(rootDir, dir)} does not exist!`);
    process.exit(1);
  }
}
console.log('All source directories exist.');

// Ensure connection.js exists since it's critical for the CLI
const connectionJsPath = path.join(distDir, 'core', 'connection.js');
if (!fs.existsSync(connectionJsPath)) {
  console.log('Creating minimal connection.js...');
  const connectionJsContent = `import { createClient } from '@clickhouse/client-web';

/**
 * Manages the connection to the ClickHouse database
 */
export class ClickHouseConnection {
  static client;
  static config;

  /**
   * Initialize the connection with configuration
   */
  static initialize(config) {
    this.config = config;
    this.client = createClient({
      host: config.host,
      username: config.username,
      password: config.password,
      database: config.database,
    });
    return this;
  }

  /**
   * Get the ClickHouse client instance
   */
  static getClient() {
    if (!this.client) {
      throw new Error('ClickHouse connection not initialized. Call ClickHouseConnection.initialize() first.');
    }
    return this.client;
  }

  /**
   * Get the current configuration
   */
  static getConfig() {
    return this.config;
  }
}`;
  fs.writeFileSync(connectionJsPath, connectionJsContent);
}

// Verify CLI files exist in source
const requiredCliFiles = [
  'bin.js',
  'generate-types.js'
];

console.log('Checking CLI source files...');
let missingCliFiles = [];
for (const file of requiredCliFiles) {
  const srcPath = path.join(srcDir, 'cli', file);
  if (!fs.existsSync(srcPath)) {
    console.error(`Warning: CLI source file ${file} is missing!`);
    missingCliFiles.push(file);
  }
}

if (missingCliFiles.length > 0) {
  console.log(`Missing CLI source files: ${missingCliFiles.join(', ')}`);
  console.log('These will need to be created in the dist directory.');
}

// Ensure generate-types.js exists in dist/cli
const generateTypesJsPath = path.join(distDir, 'cli', 'generate-types.js');
if (!fs.existsSync(generateTypesJsPath)) {
  console.log('Creating minimal generate-types.js...');
  const generateTypesJsContent = `import { ClickHouseConnection } from '../core/connection.js';
import fs from 'fs/promises';
import path from 'path';
import dotenv from 'dotenv';

// Load environment variables from the current directory
dotenv.config();

export async function generateTypes(outputPath) {
  const client = ClickHouseConnection.getClient();

  // Get all tables
  const tablesQuery = await client.query({
    query: 'SHOW TABLES',
    format: 'JSONEachRow'
  });
  const tables = await tablesQuery.json();

  let typeDefinitions = \`// Generated by @hypequery/clickhouse
import { ColumnType } from '@hypequery/clickhouse';

export interface IntrospectedSchema {\`;

  // Get columns for each table
  for (const table of tables) {
    const columnsQuery = await client.query({
      query: \`DESCRIBE \${table.name}\`,
      format: 'JSONEachRow'
    });
    const columns = await columnsQuery.json();

    typeDefinitions += \`\\n  \${table.name}: {\`;
    for (const column of columns) {
      typeDefinitions += \`\\n    \${column.name}: 'String';\`;
    }
    typeDefinitions += '\\n  };';
  }

  typeDefinitions += '\\n}\\n';

  // Ensure the output directory exists
  const outputDir = path.dirname(path.resolve(outputPath));
  await fs.mkdir(outputDir, { recursive: true });

  // Write the file
  await fs.writeFile(path.resolve(outputPath), typeDefinitions);
}`;
  fs.writeFileSync(generateTypesJsPath, generateTypesJsContent);
}

// Check required dist files
const requiredDistFiles = [
  path.join(distDir, 'index.js'),
  path.join(distDir, 'cli', 'bin.js'),
  path.join(distDir, 'cli', 'generate-types.js')
];

console.log('\nVerifying compiled distribution files...');
let missingDistFiles = [];
for (const filePath of requiredDistFiles) {
  if (!fs.existsSync(filePath)) {
    console.error(`Error: Required dist file ${path.relative(rootDir, filePath)} is missing!`);
    missingDistFiles.push(path.relative(rootDir, filePath));
  } else {
    console.log(`✓ Found: ${path.relative(rootDir, filePath)}`);
  }
}

if (missingDistFiles.length > 0) {
  console.error(`\nMissing ${missingDistFiles.length} required files:\n - ${missingDistFiles.join('\n - ')}`);
  process.exit(1);
}

console.log('\nAll required files verified successfully!');

// Additional debug: List all files in dist/cli
console.log('\nContents of dist/cli directory:');
try {
  const cliDirContents = fs.readdirSync(path.join(distDir, 'cli'));
  cliDirContents.forEach(file => {
    console.log(` - ${file}`);
  });
} catch (error) {
  console.error('Error reading dist/cli directory:', error.message);
}

// Checking main index.js exports 
const mainIndexPath = path.join(distDir, 'index.js');
if (fs.existsSync(mainIndexPath)) {
  console.log('\nMain index.js exists. Checking for CLI exports...');
  const content = fs.readFileSync(mainIndexPath, 'utf8');
  if (content.includes("export { generateTypes } from './cli/generate-types.js'")) {
    console.log('✓ CLI exports found in main index.js');
  } else {
    console.warn('Warning: CLI exports missing from main index.js');
  }
}

console.log('\nCore files script complete!'); 