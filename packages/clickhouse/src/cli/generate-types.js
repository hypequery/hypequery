import { ClickHouseConnection } from '../core/connection.js';
import fs from 'fs/promises';
import path from 'path';
import dotenv from 'dotenv';

// Load environment variables from the current directory
dotenv.config();

/**
 * @typedef {Object} ColumnInfo
 * @property {string} name - The name of the column
 * @property {string} type - The ClickHouse type of the column
 */

/**
 * @typedef {Object} GenerateTypesOptions
 * @property {string[]} [includeTables] - List of tables to include
 * @property {string[]} [excludeTables] - List of tables to exclude
 */

/**
 * Converts ClickHouse types to TypeScript types
 * @param {string} type - The ClickHouse type to convert
 * @returns {string} - The corresponding TypeScript type
 */
const clickhouseToTsType = (type) => {
  if (type.startsWith('Array(')) {
    const innerType = type.slice(6, -1);
    return `Array<${clickhouseToTsType(innerType)}>`;
  }

  // Handle Nullable types
  if (type.startsWith('Nullable(')) {
    const innerType = type.slice(9, -1);
    return `${clickhouseToTsType(innerType)} | null`;
  }

  switch (type.toLowerCase()) {
    case 'string':
    case 'fixedstring':
      return 'string';
    case 'int8':
    case 'int16':
    case 'int32':
    case 'uint8':
    case 'uint16':
    case 'uint32':
      return 'number';
    case 'int64':
    case 'uint64':
      return 'string'; // Use string for 64-bit integers to avoid precision loss
    case 'float32':
    case 'float64':
    case 'decimal':
      return 'number';
    case 'datetime':
    case 'datetime64':
      return 'string'; // Use string for datetime
    case 'date':
    case 'date32':
      return 'string'; // Use string for date
    case 'bool':
    case 'boolean':
      return 'boolean';
    default:
      // For complex types or unknown types, return string as a safe default
      return 'string';
  }
};

/**
 * Generates TypeScript type definitions from the ClickHouse database schema
 * @param {string} outputPath - The file path where the type definitions will be written
 * @param {GenerateTypesOptions} [options] - Options for type generation
 * @returns {Promise<void>}
 */
export async function generateTypes(outputPath, options = {}) {
  const client = ClickHouseConnection.getClient();
  const { includeTables = [], excludeTables = [] } = options;

  // Get all tables
  const tablesQuery = await client.query({
    query: 'SHOW TABLES',
    format: 'JSONEachRow'
  });
  let tables = await tablesQuery.json();

  // Filter tables if includeTables or excludeTables are specified
  if (includeTables.length > 0) {
    tables = tables.filter(table => includeTables.includes(table.name));
  }

  if (excludeTables.length > 0) {
    tables = tables.filter(table => !excludeTables.includes(table.name));
  }

  // If no tables remain after filtering, log a warning
  if (tables.length === 0) {
    console.warn('Warning: No tables match the filter criteria. Check your include/exclude options.');
  }

  let typeDefinitions = `// Generated by @hypequery/clickhouse
// This file defines TypeScript types based on your ClickHouse database schema

/**
 * Schema interface for use with createQueryBuilder<IntrospectedSchema>()
 * The string literals represent ClickHouse data types for each column
 */
export interface IntrospectedSchema {`;

  // Get columns for each table
  for (const table of tables) {
    const columnsQuery = await client.query({
      query: `DESCRIBE TABLE ${table.name}`,
      format: 'JSONEachRow'
    });
    const columns = await columnsQuery.json();

    typeDefinitions += `\n  ${table.name}: {`;
    for (const column of columns) {
      const clickHouseType = column.type.replace.replace(/'/g, "\\'"); // Escape single quotes, e.g. `DateTime('UTC')`
      typeDefinitions += `\n    ${column.name}: '${clickHouseType}';`;
    }
    typeDefinitions += '\n  };';
  }

  typeDefinitions += '\n}\n';

  // Also generate a type-safe record type for each table
  typeDefinitions += `\n// Type-safe record types for each table\n`;
  for (const table of tables) {
    const columnsQuery = await client.query({
      query: `DESCRIBE TABLE ${table.name}`,
      format: 'JSONEachRow'
    });
    const columns = await columnsQuery.json();

    typeDefinitions += `export interface ${capitalizeFirstLetter(table.name)}Record {`;
    for (const column of columns) {
      const tsType = clickhouseToTsType(column.type).replace(/'/g, '');
      typeDefinitions += `\n  ${column.name}: ${tsType};`;
    }
    typeDefinitions += '\n}\n\n';
  }

  // Add a usage example
  typeDefinitions += `
/**
 * Usage example:
 * 
 * import { createQueryBuilder } from '@hypequery/clickhouse';
 * import { IntrospectedSchema } from './path-to-this-file';
 * 
 * // Create a type-safe query builder
 * const db = createQueryBuilder<IntrospectedSchema>();
 * 
 * // Now you have full type safety and autocomplete
 * const results = await db
 *   .from('${tables.length > 0 ? tables[0].name : 'table_name'}')
 *   .select(['column1', 'column2'])
 *   .where('column1', 'eq', 'value')
 *   .execute();
 */
`;

  // Ensure the output directory exists
  const outputDir = path.dirname(path.resolve(outputPath));
  await fs.mkdir(outputDir, { recursive: true });

  // Write the file
  await fs.writeFile(path.resolve(outputPath), typeDefinitions);
}

/**
 * Capitalize the first letter of a string
 * @param {string} str - The string to capitalize
 * @returns {string} - The capitalized string
 */
function capitalizeFirstLetter(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
} 
