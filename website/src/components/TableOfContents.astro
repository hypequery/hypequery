<div class="lg:block lg:w-64 lg:flex-none lg:pl-8">
  <div class="sticky top-16 overflow-y-auto">
    <div class="border-l pl-4 border-gray-200">
      <h3 class="text-sm font-semibold text-gray-900 mb-4">On this page</h3>
      <div id="on-this-page" class="text-sm">
        <div class="skeleton-loader animate-pulse space-y-2">
          <div class="h-4 bg-gray-100 rounded w-3/4"></div>
          <div class="h-4 bg-gray-100 rounded w-2/3"></div>
          <div class="h-4 bg-gray-100 rounded w-1/2"></div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  function initializeTableOfContents() {
    const article = document.querySelector("article.prose");
    const tocContainer = document.getElementById("on-this-page");

    if (!article || !tocContainer) return;

    // Clear any existing content
    tocContainer.innerHTML = "";

    // Find all headings in the article
    const headings = Array.from(
      article.querySelectorAll("h1, h2, h3, h4, h5, h6"),
    );

    // Filter out the first h1 (usually the page title)
    const contentHeadings = headings.filter(
      (heading, index) => !(heading.tagName === "H1" && index === 0),
    );

    if (contentHeadings.length === 0) {
      tocContainer.innerHTML =
        '<p class="text-gray-500 italic">No sections found</p>';
      return;
    }

    // Create TOC
    const toc = document.createElement("ul");
    toc.className = "space-y-2 text-sm";

    contentHeadings.forEach((heading, index) => {
      // Ensure heading has an ID
      if (!heading.id) {
        heading.id = `heading-${index}`;
      }

      const listItem = document.createElement("li");
      const link = document.createElement("a");

      link.href = `#${heading.id}`;
      link.textContent = heading.textContent?.trim() || "";

      const level = parseInt(heading.tagName.charAt(1));
      const isMainHeading = level <= 2;

      link.className = isMainHeading
        ? "text-gray-900 hover:text-indigo-600 font-medium block py-1 transition-colors"
        : `text-gray-600 hover:text-indigo-600 block py-1 transition-colors pl-${(level - 2) * 4}`;

      // Smooth scroll on click
      link.addEventListener("click", (e) => {
        e.preventDefault();
        const targetElement = document.querySelector(`#${heading.id}`);
        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: "smooth",
            block: "start",
          });
          // Update URL hash
          history.pushState(null, "", `#${heading.id}`);
        }
      });

      listItem.appendChild(link);
      toc.appendChild(listItem);
    });

    tocContainer.appendChild(toc);

    // Add scroll spy functionality
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            // Remove active class from all links
            const links = tocContainer.querySelectorAll("a");
            links.forEach((link) => {
              link.classList.remove("text-indigo-600");
            });

            // Add active class to current link
            const activeLink = tocContainer.querySelector(
              `a[href="#${entry.target.id}"]`,
            );
            if (activeLink) {
              activeLink.classList.add("text-indigo-600");
            }
          }
        });
      },
      {
        rootMargin: "-100px 0px -66% 0px",
        threshold: 0,
      },
    );

    // Observe all headings
    contentHeadings.forEach((heading) => {
      observer.observe(heading);
    });
  }

  // Function to wait for DOM to be ready
  function waitForDOM(callback: () => void) {
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", callback);
    } else {
      callback();
    }
  }

  // Initialize TOC
  waitForDOM(() => {
    setTimeout(initializeTableOfContents, 200);
  });

  // Re-initialize on navigation (for SPA-like behavior)
  document.addEventListener("astro:page-load", () => {
    setTimeout(initializeTableOfContents, 200);
  });
</script>
