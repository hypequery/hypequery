---
import Navigation from "../components/Navigation.astro";
import Footer from "../components/Footer.astro";
import Head from "../components/Head.astro";
import TableOfContents from "../components/TableOfContents.astro";
import "../styles/base.css";

interface Props {
  title: string;
  description?: string;
}

const {
  title,
  description = "hypequery documentation - Learn how to build type-safe dashboards with ClickHouse",
} = Astro.props;

// Get the current URL path
const currentPath = Astro.url.pathname;

// Define the navigation structure directly since we're using pages-based routing
const sidebar = [
  {
    title: "Getting Started",
    items: [
      { title: "Introduction", href: "/docs/introduction" },
      { title: "Installation", href: "/docs/installation" },
      { title: "Connecting to ClickHouse", href: "/docs/reference/connection" },
      { title: "Type Generation", href: "/docs/type-generation" },
    ],
  },
  {
    title: "Core Features",
    items: [
      { title: "Query Building", href: "/docs/guides/query-building" },
      { title: "Join Relationships", href: "/docs/guides/joins" },
      { title: "Cross Filtering", href: "/docs/guides/filtering" },
      {
        title: "Time-Based Functions",
        href: "/docs/guides/time-based-functions",
      },
    ],
  },
  {
    title: "Query Builder",
    items: [
      { title: "Select", href: "/docs/functions/query-builder/select" },
      { title: "Where", href: "/docs/functions/query-builder/where" },
      { title: "Joins", href: "/docs/functions/query-builder/joins" },
      { title: "Group By", href: "/docs/functions/query-builder/group-by" },
      { title: "Having", href: "/docs/functions/query-builder/having" },
      { title: "Order By", href: "/docs/functions/query-builder/order-by" },
      { title: "Limit", href: "/docs/functions/query-builder/limit" },
      { title: "Offset", href: "/docs/functions/query-builder/offset" },
      { title: "Distinct", href: "/docs/functions/query-builder/distinct" },
      { title: "CTEs", href: "/docs/functions/query-builder/ctes" },
      {
        title: "Execute & toSQL",
        href: "/docs/functions/query-builder/execute",
      },
    ],
  },
  {
    title: "SQL Functions",
    items: [
      { title: "Raw", href: "/docs/functions/sql-functions/raw" },
      { title: "Raw As", href: "/docs/functions/sql-functions/rawAs" },
    ],
  },
  {
    title: "Advanced Features",
    items: [
      // { title: "Cross Filtering", href: "/docs/features/cross-filtering" },
      // { title: "Pagination", href: "/docs/features/pagination" },
      { title: "Subqueries", href: "/docs/features/subqueries" },
      { title: "Helper methods", href: "/docs/guides/helper-methods" },
      // { title: "Debugging", href: "/docs/features/debugging" },
      { title: "Streaming", href: "/docs/guides/streaming" },
      { title: "Logging", href: "/docs/logging" },
    ],
  },
  // {
  //   title: "Reference",
  //   items: [
  //     { title: "API Reference", href: "/docs/reference/api" },
  //     { title: "Best Practices", href: "/docs/reference/best-practices" },
  //   ],
  // },
  {
    title: "API Documentation",
    items: [
      // { title: "Overview", href: "/docs/reference/api" },
      // { title: "Documentation", href: "/docs/reference/api/README" },
      { title: "Globals", href: "/docs/reference/api/globals" },
      {
        title: "Classes",
        href: "/docs/reference/api/classes/ClickHouseConnection",
        items: [
          {
            title: "ClickHouseConnection",
            href: "/docs/reference/api/classes/ClickHouseConnection",
          },
          {
            title: "CrossFilter",
            href: "/docs/reference/api/classes/CrossFilter",
          },
          {
            title: "JoinRelationships",
            href: "/docs/reference/api/classes/JoinRelationships",
          },
        ],
      },
      {
        title: "Functions",
        href: "/docs/reference/api/functions/createQueryBuilder",
        items: [
          {
            title: "createQueryBuilder",
            href: "/docs/reference/api/functions/createQueryBuilder",
          },
          { title: "datePart", href: "/docs/reference/api/functions/datePart" },
          {
            title: "formatDateTime",
            href: "/docs/reference/api/functions/formatDateTime",
          },
          {
            title: "generateTypes",
            href: "/docs/reference/api/functions/generateTypes",
          },
          { title: "raw", href: "/docs/reference/api/functions/raw" },
          { title: "rawAs", href: "/docs/reference/api/functions/rawAs" },
          {
            title: "toDateTime",
            href: "/docs/reference/api/functions/toDateTime",
          },
          {
            title: "toStartOfInterval",
            href: "/docs/reference/api/functions/toStartOfInterval",
          },
        ],
      },
      {
        title: "Interfaces",
        href: "/docs/reference/api/interfaces/AliasedExpression",
        items: [
          {
            title: "AliasedExpression",
            href: "/docs/reference/api/interfaces/AliasedExpression",
          },
          {
            title: "ClickHouseClientConfig",
            href: "/docs/reference/api/interfaces/ClickHouseClientConfig",
          },
          {
            title: "ClickHouseHostConfig",
            href: "/docs/reference/api/interfaces/ClickHouseHostConfig",
          },
          {
            title: "JoinPath",
            href: "/docs/reference/api/interfaces/JoinPath",
          },
          {
            title: "JoinPathOptions",
            href: "/docs/reference/api/interfaces/JoinPathOptions",
          },
          {
            title: "PageInfo",
            href: "/docs/reference/api/interfaces/PageInfo",
          },
          {
            title: "QueryConfig",
            href: "/docs/reference/api/interfaces/QueryConfig",
          },
          {
            title: "SqlExpression",
            href: "/docs/reference/api/interfaces/SqlExpression",
          },
          {
            title: "TableSchema",
            href: "/docs/reference/api/interfaces/TableSchema",
          },
        ],
      },
    ],
  },
];

// Helper function to check if a section should be expanded by default
function shouldExpandSection(section: any, currentPath: string): boolean {
  // Check if current page is in this section
  return section.items.some((item: any) => {
    if (item.href === currentPath) return true;
    if (item.items) {
      return item.items.some((subItem: any) => subItem.href === currentPath);
    }
    return false;
  });
}
---

<!doctype html>
<html lang="en" class="h-full">
  <head>
    <Head title={title} description={description} favicon="/favicon.svg" />
  </head>
  <body class="h-full bg-white">
    <Navigation />

    <div
      class="relative mx-auto max-w-8xl justify-center sm:px-2 lg:px-8 xl:px-12 pt-10"
    >
      <div class="relative flex flex-col md:flex-row min-h-[calc(100vh-4rem)]">
        <!-- Sidebar -->
        <div
          class="relative block flex-none md:w-56 border-b md:border-b-0 md:border-r border-gray-200 mb-4 md:mb-0"
        >
          <div
            class="md:sticky md:top-10 h-auto md:h-[calc(100vh-4rem)] overflow-y-auto overflow-x-hidden -py-4 md:py-16 pl-0.5"
          >
            <nav class="w-full pr-4 md:pr-8 text-sm">
              <div class="space-y-4">
                {
                  sidebar.map((section) => {
                    const isExpanded = shouldExpandSection(
                      section,
                      currentPath,
                    );
                    return (
                      <div class="mt-4">
                        <button
                          class="flex items-center justify-between w-full mb-2 py-1 font-medium text-gray-900 hover:text-indigo-600 transition-colors"
                          data-section-id={section.title
                            .replace(/\s+/g, "-")
                            .toLowerCase()}
                        >
                          <span>{section.title}</span>
                          <svg
                            id={`chevron-${section.title.replace(/\s+/g, "-").toLowerCase()}`}
                            class={`w-4 h-4 transition-transform duration-200 ${isExpanded ? "rotate-180" : ""}`}
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                          >
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
                              d="M19 9l-7 7-7-7"
                            />
                          </svg>
                        </button>
                        <ul
                          id={`section-${section.title.replace(/\s+/g, "-").toLowerCase()}`}
                          class={`mt-1 space-y-1 transition-all duration-200 ${isExpanded ? "block" : "hidden"}`}
                        >
                          {section.items.map((item) => (
                            <li>
                              <a
                                href={item.href}
                                class:list={[
                                  "block px-3 py-2 md:py-2 text-sm rounded-md transition-colors",
                                  currentPath === item.href
                                    ? "bg-indigo-50 text-indigo-600 font-medium"
                                    : "text-gray-600 hover:text-gray-900 hover:bg-gray-50",
                                ]}
                              >
                                {item.title}
                              </a>
                              {item.items && (
                                <ul class="mt-1 pl-4 space-y-1">
                                  {item.items.map((subItem) => (
                                    <li>
                                      <a
                                        href={subItem.href}
                                        class:list={[
                                          "block px-3 py-1 text-sm rounded-md transition-colors",
                                          currentPath === subItem.href
                                            ? "text-indigo-600 font-medium"
                                            : "text-gray-500 hover:text-gray-700 hover:bg-gray-50",
                                        ]}
                                      >
                                        {subItem.title}
                                      </a>
                                    </li>
                                  ))}
                                </ul>
                              )}
                            </li>
                          ))}
                        </ul>
                      </div>
                    );
                  })
                }
              </div>
            </nav>
          </div>
        </div>

        <!-- Main content -->
        <div class="min-w-0 flex-auto px-4 md:pl-8 py-8 md:py-16">
          <div class="flex flex-col lg:flex-row">
            <article class="prose max-w-none lg:max-w-3xl flex-grow">
              <slot />
            </article>
          </div>
        </div>

        <!-- Table of contents -->
        <div class="hidden xl:block relative flex-none w-80 pl-8">
          <div class="sticky top-10 h-[calc(100vh-4rem)] overflow-y-auto py-16">
            <TableOfContents />
          </div>
        </div>
      </div>
    </div>

    <!-- The footer is outside the main content area -->
    <div class="bg-gray-50">
      <Footer />
    </div>

    <script>
      // Collapsible sidebar functionality
      function toggleSection(sectionId: string) {
        const section = document.getElementById(`section-${sectionId}`);
        const chevron = document.getElementById(`chevron-${sectionId}`);

        if (section && chevron) {
          const isHidden = section.classList.contains("hidden");

          if (isHidden) {
            section.classList.remove("hidden");
            chevron.classList.add("rotate-180");
          } else {
            section.classList.add("hidden");
            chevron.classList.remove("rotate-180");
          }
        }
      }

      // Add event listeners to sidebar buttons
      function initializeSidebar() {
        const sidebarButtons = document.querySelectorAll("[data-section-id]");

        sidebarButtons.forEach((button) => {
          button.addEventListener("click", () => {
            const sectionId = button.getAttribute("data-section-id");
            if (sectionId) {
              toggleSection(sectionId);
            }
          });
        });
      }

      // Expand sections that contain the current page on page load
      function expandCurrentSection() {
        const currentPath = window.location.pathname;
        const sections = document.querySelectorAll('[id^="section-"]');

        sections.forEach((section) => {
          const sectionId = section.id.replace("section-", "");
          const links = section.querySelectorAll("a");
          let shouldExpand = false;

          links.forEach((link) => {
            if (link.getAttribute("href") === currentPath) {
              shouldExpand = true;
            }
          });

          if (shouldExpand) {
            section.classList.remove("hidden");
            const chevron = document.getElementById(`chevron-${sectionId}`);
            if (chevron) {
              chevron.classList.add("rotate-180");
            }
          }
        });
      }

      // Initialize everything when DOM is ready
      document.addEventListener("DOMContentLoaded", () => {
        initializeSidebar();
        expandCurrentSection();
      });

      // Also initialize on Astro page loads (for SPA-like behavior)
      document.addEventListener("astro:page-load", () => {
        initializeSidebar();
        expandCurrentSection();
      });
    </script>

    <script is:inline>
      // Simple copy button implementation
      function addCopyButtons() {
        const codeBlocks = document.querySelectorAll("pre");
        console.log("Found code blocks:", codeBlocks.length);

        codeBlocks.forEach((block, index) => {
          // Create a simple copy button with icon
          const button = document.createElement("button");
          button.innerHTML = `
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
              <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
            </svg>
          `;
          button.setAttribute("title", "Copy");
          button.style.cssText = `
            position: absolute;
            top: 10px;
            right: 10px;
            background: rgba(255, 255, 255, 0.9);
            color: #6b7280;
            border: 1px solid #d1d5db;
            padding: 6px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            z-index: 1000;
            opacity: 0;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
          `;

          // Show button on hover
          block.addEventListener("mouseenter", () => {
            button.style.opacity = "1";
          });

          block.addEventListener("mouseleave", () => {
            button.style.opacity = "0";
          });

          // Copy functionality
          button.addEventListener("click", () => {
            const code = block.querySelector("code");
            const text = code ? code.textContent : block.textContent;

            // Immediately show "Copied!" tooltip
            button.setAttribute("title", "Copied!");
            button.innerHTML = `
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="20 6 9 17 4 12"></polyline>
              </svg>
            `;
            button.style.background = "rgba(34, 197, 94, 0.9)";
            button.style.color = "white";
            button.style.borderColor = "#22c55e";

            navigator.clipboard
              .writeText(text)
              .then(() => {
                // Keep the "Copied!" state for 2 seconds
                setTimeout(() => {
                  button.innerHTML = `
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                      <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
                    </svg>
                  `;
                  button.setAttribute("title", "Copy");
                  button.style.background = "rgba(255, 255, 255, 0.9)";
                  button.style.color = "#6b7280";
                  button.style.borderColor = "#d1d5db";
                }, 2000);
              })
              .catch((err) => {
                console.error("Failed to copy:", err);
                // Reset on error
                button.innerHTML = `
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                    <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
                  </svg>
                `;
                button.setAttribute("title", "Copy");
                button.style.background = "rgba(255, 255, 255, 0.9)";
                button.style.color = "#6b7280";
                button.style.borderColor = "#d1d5db";
              });
          });

          // Make block relative and add button
          block.style.position = "relative";
          block.appendChild(button);

          console.log(`Added copy button to block ${index + 1}`);
        });
      }

      // Try multiple times to ensure it works
      if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", addCopyButtons);
      } else {
        addCopyButtons();
      }

      // Also try on window load
      window.addEventListener("load", addCopyButtons);

      // And try after a delay
      setTimeout(addCopyButtons, 1000);
    </script>

    <style is:global>
      /* Root variable definitions */
      :root {
        --font-fallback: -apple-system, BlinkMacSystemFont, Segoe UI, Helvetica,
          Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji;
        --font-body: "Poppins", var(--font-fallback);
        --theme-text: #1f2937;
        --theme-bg: #ffffff;
        --theme-primary: #4f46e5;
        --theme-primary-hover: #4338ca;
      }

      html {
        font-family: var(--font-body);
        scroll-behavior: smooth;
      }

      body {
        margin: 0;
        padding: 0;
        color: var(--theme-text);
        background: var(--theme-bg);
      }

      code {
        font-family:
          Menlo,
          Monaco,
          Lucida Console,
          Liberation Mono,
          DejaVu Sans Mono,
          Bitstream Vera Sans Mono,
          Courier New,
          monospace;
      }

      /* Prose styles for markdown content */
      .prose {
        color: var(--theme-text);
      }

      .prose h1 {
        font-size: 2em;
        margin-top: 0;
        margin-bottom: 0.8888889em;
        line-height: 1.1111111;
        font-weight: 600;
        scroll-margin-top: 5rem;
      }

      .prose h2 {
        font-size: 1.35em;
        margin-top: 2em;
        margin-bottom: 1em;
        line-height: 1.3333333;
        font-weight: 600;
        scroll-margin-top: 5rem;
      }

      .prose h3 {
        font-size: 1.125em;
        margin-top: 1.6em;
        margin-bottom: 0.6em;
        line-height: 1.6;
        font-weight: 600;
        scroll-margin-top: 5rem;
      }

      .prose h4 {
        font-size: 1em;
        margin-top: 1.4em;
        margin-bottom: 0.5em;
        line-height: 1.6;
        font-weight: 600;
        scroll-margin-top: 5rem;
      }

      .prose h5 {
        font-size: 0.9em;
        margin-top: 1.2em;
        margin-bottom: 0.4em;
        line-height: 1.6;
        font-weight: 600;
        scroll-margin-top: 5rem;
      }

      .prose h6 {
        font-size: 0.8em;
        margin-top: 1em;
        margin-bottom: 0.3em;
        line-height: 1.6;
        font-weight: 600;
        scroll-margin-top: 5rem;
      }

      .prose code {
        color: var(--theme-text);
        background-color: #f3f4f6;
        padding: 0.2em 0.4em;
        border-radius: 0.25em;
        font-size: 0.8em;
      }

      .prose pre {
        color: #e5e7eb;
        background-color: #1f2937;
        overflow-x: auto;
        font-size: 0.8em;
        line-height: 1.7142857;
        margin-top: 1.7142857em;
        margin-bottom: 1.7142857em;
        border-radius: 0.375rem;
        padding: 0.8571429em 1.1428571em;
      }

      .prose pre code {
        background-color: transparent;
        border-width: 0;
        border-radius: 0;
        padding: 0;
        font-weight: 400;
        color: inherit;
        font-size: inherit;
        font-family: inherit;
        line-height: inherit;
      }

      /* Add styles for documentation lists */
      .prose ul {
        list-style-type: disc;
        margin-top: 1em;
        margin-bottom: 1em;
        padding-left: 1.5em;
      }

      .prose ul li {
        margin-top: 0.5em;
        margin-bottom: 0.5em;
      }

      /* For nested lists */
      .prose ul ul {
        list-style-type: circle;
        margin-top: 0.5em;
        margin-bottom: 0.5em;
      }

      /* Table of contents font sizes */
      .toc {
        font-size: 0.8rem;
      }

      .toc a {
        font-size: 0.8rem;
      }
    </style>
  </body>
</html>
