---
import Navigation from "../components/Navigation.astro";
import Footer from "../components/Footer.astro";
import "../styles/base.css";

interface Props {
  title: string;
  description?: string;
}

const { title, description = "hypequery is a TypeScript SDK for ClickHouse." } =
  Astro.props;

// Get Google Analytics Measurement ID from environment variable
const gaMeasurementId = import.meta.env.PUBLIC_GA_MEASUREMENT_ID;
---

<!doctype html>
<html lang="en" class="h-full scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.png" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta name="description" content={description} />

    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />

    <!-- Netlify Identity Widget -->
    <script src="https://identity.netlify.com/v1/netlify-identity-widget.js"
    ></script>

    <!-- Umami Analytics -->
    <script
      defer
      src="https://cloud.umami.is/script.js"
      data-website-id="e5dd7de0-ba7e-4fd6-a56c-79a58ab4f5a8"></script>

    <!-- Google Analytics -->
    {
      gaMeasurementId && (
        <>
          <script
            async
            src={`https://www.googletagmanager.com/gtag/js?id=${gaMeasurementId}`}
          />
          <script
            set:html={`
          window.dataLayer = window.dataLayer || [];
          function gtag(){dataLayer.push(arguments);}
          gtag('js', new Date());
          gtag('config', '${gaMeasurementId}');
        `}
          />
        </>
      )
    }
  </head>
  <body class="h-full">
    <Navigation />
    <slot />
    <Footer />

    <script>
      // Netlify Identity redirect
      if ((window as any).netlifyIdentity) {
        (window as any).netlifyIdentity.on("init", (user: any) => {
          if (!user) {
            (window as any).netlifyIdentity.on("login", () => {
              document.location.href = "/admin/";
            });
          }
        });
      }

      // Add copy buttons to code blocks
      document.addEventListener("DOMContentLoaded", () => {
        const codeBlocks = document.querySelectorAll("pre");

        codeBlocks.forEach((codeBlock) => {
          // Create a wrapper div to hold the code block and position it relatively
          const wrapper = document.createElement("div");
          wrapper.style.position = "relative";

          // Check if parent node exists
          if (codeBlock.parentNode) {
            codeBlock.parentNode.insertBefore(wrapper, codeBlock);
            wrapper.appendChild(codeBlock);

            // Create the copy button
            const copyButton = document.createElement("button");
            copyButton.className = "copy-button";
            copyButton.setAttribute("aria-label", "Copy code to clipboard");
            copyButton.setAttribute("title", "Copy to clipboard");

            // Add the SVG icons (copy and check)
            copyButton.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" class="copy-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
              </svg>
              <svg xmlns="http://www.w3.org/2000/svg" class="check-icon hidden" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="20 6 9 17 4 12"></polyline>
              </svg>
            `;

            // Handle the copy click
            copyButton.addEventListener("click", () => {
              const code = codeBlock.querySelector("code");
              let text;

              if (code) {
                text = code.innerText;
              } else {
                // If there's no code element, use the pre element's text content directly
                text = codeBlock.innerText;
              }

              if (text) {
                navigator.clipboard
                  .writeText(text)
                  .then(() => {
                    // Show success state
                    const copyIcon = copyButton.querySelector(".copy-icon");
                    const checkIcon = copyButton.querySelector(".check-icon");

                    if (copyIcon && checkIcon) {
                      copyIcon.classList.add("hidden");
                      checkIcon.classList.remove("hidden");

                      // Reset after 2 seconds
                      setTimeout(() => {
                        copyIcon.classList.remove("hidden");
                        checkIcon.classList.add("hidden");
                      }, 2000);
                    }
                  })
                  .catch((err) => {
                    console.error("Failed to copy: ", err);
                  });
              }
            });

            // Add the button to the code block
            wrapper.appendChild(copyButton);
          }
        });

        // Add intersection observer for animation on scroll
        const observerOptions = {
          root: null,
          rootMargin: "0px",
          threshold: 0.1,
        };

        const observer = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              entry.target.classList.add("animate-in");
              observer.unobserve(entry.target);
            }
          });
        }, observerOptions);

        const animatedElements =
          document.querySelectorAll(".animate-on-scroll");
        animatedElements.forEach((el) => observer.observe(el));
      });
    </script>
  </body>
</html>

<style is:global>
  :root {
    --font-fallback: -apple-system, BlinkMacSystemFont, Segoe UI, Helvetica,
      Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji;
    --font-body: "Poppins", var(--font-fallback);
    --theme-text: #1f2937;
    --theme-bg: #ffffff;
    --theme-primary: #4f46e5;
    --theme-primary-hover: #4338ca;
  }

  html {
    font-family: var(--font-body);
    scroll-behavior: smooth;
  }

  body {
    margin: 0;
    padding: 0;
    color: var(--theme-text);
    background: var(--theme-bg);
  }

  code {
    font-family:
      Menlo,
      Monaco,
      Lucida Console,
      Liberation Mono,
      DejaVu Sans Mono,
      Bitstream Vera Sans Mono,
      Courier New,
      monospace;
  }

  /* Copy button styles */
  .copy-button {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    padding: 0.35rem;
    border-radius: 0.25rem;
    background-color: #ffffff25;
    border: none;
    cursor: pointer;
    color: #e5e7eb;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition:
      opacity 0.2s,
      background-color 0.2s;
  }

  .copy-button:hover,
  .copy-button:focus {
    background-color: #ffffff40;
    opacity: 1;
  }

  .copy-button svg {
    width: 1rem;
    height: 1rem;
  }

  .hidden {
    display: none;
  }

  /* Show copy button when hovering the code block */
  pre:hover .copy-button {
    opacity: 1;
  }

  /* Animation classes */
  .animate-on-scroll {
    opacity: 0;
    transform: translateY(20px);
    transition:
      opacity 0.6s ease-out,
      transform 0.6s ease-out;
  }

  .animate-in {
    opacity: 1;
    transform: translateY(0);
  }

  /* Card hover effects */
  .feature-card {
    transition:
      transform 0.3s ease,
      box-shadow 0.3s ease;
  }

  .feature-card:hover {
    transform: translateY(-5px);
    box-shadow:
      0 10px 25px -5px rgba(0, 0, 0, 0.1),
      0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }
</style>
